{"version":3,"sources":["imgs/paperclip.svg","imgs/trash.svg","constants/index.js","utils/index.js","components/SendForm.js","actions/index.js","containers/SendFormContainer.js","components/SendMessagesList.js","containers/SendMessagesListContainer.js","components/Logo.js","App.js","reducers/login.js","reducers/messagesReducer.js","reducers/index.js","serviceWorker.js","index.js"],"names":["module","exports","form","errorMessages","actionTypes","statusMessage","getTotalSize","files","length","reduce","total","file","size","validFilesByType","validFileTypes","i","type","toBase64","Promise","resolve","fileReader","FileReader","readAsDataURL","onloadend","fileInBase64","result","replace","LIMITED_SIZES_FILES","TYPES_FILES","initialState","nameFrom","emailFrom","nameTo","emailTo","subject","textMessage","SendForm","sendMessage","useState","inputs","setInputs","isSent","setSent","setFiles","isValid","setValid","invalidTypeFile","message","limitedSizeFile","limitedSizeFiles","errors","setError","dropzoneRef","useRef","handleChange","e","persist","target","name","value","trim","openDialog","preventDefault","current","open","deleteFile","index","filter","_","handleBlur","handleSubmit","then","className","onClick","ref","noClick","noKeyboard","onDrop","acceptedFiles","invalidFilesByType","invalidFilesBySize","filteredFiles","sizeFilteredFiles","sizeDropedFiles","setTimeout","getRootProps","getInputProps","isDragActive","placeholder","onChange","tabIndex","onBlur","required","map","key","path","src","paperclip","alt","filename","end","slice","processFileName","trash","byte","toFixed","disabled","dispatch","sendsay","Sendsay","login","password","a","async","filesInBase64","all","contents","fileObj","content","encoding","push","filesToBase64","filesBase64","payload","isLogged","session","request","action","letter","text","attaches","sendwhen","mca","res","date","Date","now","trackId","status","error","errMessage","connect","SendMessagesList","messages","getStatus","useEffect","forEach","toLocaleString","day","month","state","messagesReducer","id","obj","Logo","data-test","App","SendFormContainer","SendMessagesListContainer","updatedMessages","combineReducers","Boolean","window","location","hostname","match","middleware","thunk","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d58f3695.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/paperclip.7cf44a95.svg\";","module.exports = __webpack_public_path__ + \"static/media/trash.f81c7834.svg\";","export const form = {\r\n  NAME_PLACEHOLDER: 'Имя',\r\n  EMAIL_PLACEHOLDER: 'Email',\r\n};\r\n\r\nexport const errorMessages = {\r\n  EMAIL_EMPTY: 'Email не может быть пустым',\r\n  LIMIT_SIZE_FILE: 'Невозможно добавить. Превышен размер файла, не более 5мб',\r\n  LIMIT_SIZE_FILES:\r\n    'Невозможно добавить. Превышен размер файлов в одном письме, не более 20мб',\r\n  INVALID_TYPE_FILE: 'Мы не принимаем этот тип файла',\r\n};\r\n\r\nexport const actionTypes = {\r\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n  LOGIN_ERROR: 'LOGIN_ERROR',\r\n  LOGOUT: 'LOGOUT',\r\n  SEND_MESSAGE: 'SEND_MESSAGE',\r\n  GET_STATUS: 'GET_STATUS',\r\n};\r\n\r\nexport const statusMessage = {\r\n  SENT: 'Отправлено',\r\n  QUEUE: 'В очереди',\r\n  ERROR: 'Ошибка',\r\n};\r\n","// form\r\nexport function validateEmail(email) {\r\n  let pattern =\r\n    '/^(([^<>()[]\\\\.,;:s@\"]+(.[^<>()[]\\\\.,;:s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/';\r\n  return pattern.test(String(email).toLowerCase());\r\n}\r\n\r\n// drag and drop\r\nexport const getTotalSize = files => {\r\n  if (files.length === 0) return 0;\r\n  return files.reduce((total, file) => total + file.size, 0);\r\n};\r\n\r\nexport const validFilesByType = (file, validFileTypes) => {\r\n  for (let i = 0; i < validFileTypes.length; i++) {\r\n    if (file.type === validFileTypes[i]) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n//common\r\nexport function convertByteToMb(byte) {\r\n  return byte / 1024 / 1024;\r\n}\r\n\r\nexport function toBase64(file) {\r\n  return new Promise(resolve => {\r\n    let fileReader = new FileReader();\r\n    fileReader.readAsDataURL(file);\r\n    fileReader.onloadend = function() {\r\n      const regex = /data:\\S*;base64,/;\r\n      const fileInBase64 = fileReader.result.replace(regex, '');\r\n      resolve(fileInBase64);\r\n    };\r\n  });\r\n}\r\n\r\nexport async function filesToBase64(files) {\r\n  let filesInBase64 = [];\r\n  await Promise.all(\r\n    files.map(async file => {\r\n      const contents = await toBase64(file);\r\n      const fileObj = {\r\n        name: file.name,\r\n        content: contents,\r\n        encoding: 'base64',\r\n      };\r\n      filesInBase64.push(fileObj);\r\n    })\r\n  );\r\n  return filesInBase64;\r\n}\r\n\r\nexport const processFileName = filename => {\r\n  const max_filename_length = 20;\r\n  if (filename.length > max_filename_length) {\r\n    let end = filename.slice(-4);\r\n    let start = filename.slice(0, 13);\r\n    return start + '...' + end;\r\n  } else {\r\n    return filename;\r\n  }\r\n};\r\n","import React, { useState, useRef } from 'react';\r\nimport Dropzone from 'react-dropzone';\r\nimport { form, errorMessages } from '../constants';\r\nimport {\r\n  convertByteToMb,\r\n  getTotalSize,\r\n  validFilesByType,\r\n  processFileName,\r\n} from '../utils';\r\nimport PropTypes from 'prop-types';\r\nimport './SendForm.css';\r\nimport paperclip from '../imgs/paperclip.svg';\r\nimport trash from '../imgs/trash.svg';\r\n\r\nconst LIMITED_SIZES_FILES = {\r\n  file: 5 * 1024 * 1024,\r\n  files: 20 * 1024 * 1024,\r\n};\r\nconst TYPES_FILES = [\r\n  'image/jpeg',\r\n  'image/png',\r\n  'image/gif',\r\n  'application/msword',\r\n  'application/vnd.ms-excel',\r\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n  'application/pdf',\r\n  'application/x-zip-compressed',\r\n];\r\n\r\nconst initialState = {\r\n  nameFrom: '',\r\n  emailFrom: '',\r\n  nameTo: '',\r\n  emailTo: '',\r\n  subject: '',\r\n  textMessage: '',\r\n};\r\n\r\nconst SendForm = ({ sendMessage }) => {\r\n  const [inputs, setInputs] = useState(initialState);\r\n  const [isSent, setSent] = useState(false);\r\n  const [files, setFiles] = useState([]);\r\n  const [isValid, setValid] = useState(false);\r\n  const [errors, setError] = useState({\r\n    emailFrom: '',\r\n    emailTo: '',\r\n    invalidTypeFile: {\r\n      message: '',\r\n      files: [],\r\n    },\r\n    limitedSizeFile: {\r\n      message: '',\r\n      files: [],\r\n    },\r\n    limitedSizeFiles: '',\r\n  });\r\n\r\n  const dropzoneRef = useRef(null);\r\n\r\n  const handleChange = e => {\r\n    e.persist();\r\n    setInputs(inputs => ({\r\n      ...inputs,\r\n      [e.target.name]: e.target.value.trim(),\r\n    }));\r\n  };\r\n\r\n  const handleDrop = acceptedFiles => {\r\n    let invalidFilesByType = [];\r\n    let invalidFilesBySize = [];\r\n\r\n    const filteredFilesByType = acceptedFiles.filter(file => {\r\n      if (!validFilesByType(file, TYPES_FILES)) {\r\n        invalidFilesByType = [...invalidFilesByType, file];\r\n      }\r\n      return validFilesByType(file, TYPES_FILES);\r\n    });\r\n\r\n    const filteredFiles = filteredFilesByType.filter(file => {\r\n      if (file.size > LIMITED_SIZES_FILES.file) {\r\n        invalidFilesBySize = [...invalidFilesBySize, file];\r\n      }\r\n      return file.size <= LIMITED_SIZES_FILES.file;\r\n    });\r\n\r\n    const sizeFilteredFiles = getTotalSize(filteredFiles);\r\n    const sizeDropedFiles = getTotalSize(files);\r\n\r\n    if (\r\n      sizeFilteredFiles > LIMITED_SIZES_FILES.files ||\r\n      sizeDropedFiles + sizeFilteredFiles > LIMITED_SIZES_FILES.files\r\n    ) {\r\n      setError({\r\n        ...errors,\r\n        invalidTypeFile: {\r\n          message: '',\r\n          files: [],\r\n        },\r\n        limitedSizeFile: {\r\n          message: '',\r\n          files: [],\r\n        },\r\n        limitedSizeFiles: errorMessages.LIMIT_SIZE_FILES,\r\n      });\r\n    } else {\r\n      setFiles([...files, ...filteredFiles]);\r\n\r\n      setError({\r\n        ...errors,\r\n        invalidTypeFile: {\r\n          message: '',\r\n          files: [],\r\n        },\r\n        limitedSizeFile: {\r\n          message: '',\r\n          files: [],\r\n        },\r\n        limitedSizeFiles: '',\r\n      });\r\n    }\r\n\r\n    invalidFilesByType.length !== 0 &&\r\n      setError({\r\n        ...errors,\r\n        limitedSizeFile: {\r\n          message: '',\r\n          files: [],\r\n        },\r\n        limitedSizeFiles: '',\r\n        invalidTypeFile: {\r\n          message: errorMessages.INVALID_TYPE_FILE,\r\n          files: [...errors.invalidTypeFile.files, ...invalidFilesByType],\r\n        },\r\n      });\r\n\r\n    invalidFilesBySize.length !== 0 &&\r\n      setError({\r\n        ...errors,\r\n        limitedSizeFiles: '',\r\n        invalidTypeFile: {\r\n          message: '',\r\n          files: [],\r\n        },\r\n        limitedSizeFile: {\r\n          message: errorMessages.LIMIT_SIZE_FILE,\r\n          files: [...errors.limitedSizeFile.files, ...invalidFilesBySize],\r\n        },\r\n      });\r\n\r\n    invalidFilesByType.length !== 0 &&\r\n      invalidFilesBySize.length !== 0 &&\r\n      setError({\r\n        ...errors,\r\n        limitedSizeFiles: '',\r\n        invalidTypeFile: {\r\n          message: errorMessages.INVALID_TYPE_FILE,\r\n          files: [...errors.invalidTypeFile.files, ...invalidFilesByType],\r\n        },\r\n        limitedSizeFile: {\r\n          message: errorMessages.LIMIT_SIZE_FILE,\r\n          files: [...errors.limitedSizeFile.files, ...invalidFilesBySize],\r\n        },\r\n      });\r\n\r\n    setTimeout(() => {\r\n      setError({\r\n        ...errors,\r\n        invalidTypeFile: {\r\n          message: '',\r\n          files: [],\r\n        },\r\n        limitedSizeFile: {\r\n          message: '',\r\n          files: [],\r\n        },\r\n        limitedSizeFiles: '',\r\n      });\r\n    }, 5000);\r\n  };\r\n  const openDialog = e => {\r\n    e.preventDefault();\r\n    if (dropzoneRef.current) {\r\n      dropzoneRef.current.open();\r\n    }\r\n  };\r\n  const deleteFile = index => {\r\n    return e => {\r\n      e.persist();\r\n      setFiles(files.filter((_, i) => i !== index));\r\n    };\r\n  };\r\n  const handleBlur = e => {\r\n    e.persist();\r\n\r\n    if (inputs[e.target.name] !== '') {\r\n      setError({ ...errors, [e.target.name]: '' });\r\n    } else {\r\n      setError({ ...errors, [e.target.name]: errorMessages.EMAIL_EMPTY });\r\n      setValid(false);\r\n    }\r\n\r\n    if (inputs.emailFrom !== '' && inputs.emailTo !== '') {\r\n      setValid(true);\r\n    }\r\n  };\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    sendMessage({\r\n      nameFrom: inputs.nameFrom,\r\n      emailFrom: inputs.emailFrom,\r\n      nameTo: inputs.nameTo,\r\n      emailTo: inputs.emailTo,\r\n      subject: inputs.subject,\r\n      textMessage: inputs.textMessage,\r\n      files: files,\r\n    }).then(() => {\r\n      setSent(true);\r\n    });\r\n  };\r\n  const clearForm = e => {\r\n    e.preventDefault();\r\n    setInputs(initialState);\r\n    setSent(false);\r\n    setValid(false);\r\n    setFiles([]);\r\n  };\r\n  return (\r\n    <div>\r\n      {isSent ? (\r\n        <div className=\"form__sent\" onClick={clearForm}>\r\n          <h1 className=\"form__header\">\r\n            Сообщение поставлено в очередь на отправку\r\n          </h1>\r\n          <p className=\"form__sentp\">\r\n            {`Совсем скоро сообщение вылетит из сервера, и будет двигаться в\r\n      сторону почты получателя «${inputs.emailTo}» со скоростью электронов.`}\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"form__container\">\r\n          <Dropzone ref={dropzoneRef} noClick noKeyboard onDrop={handleDrop}>\r\n            {({ getRootProps, getInputProps, isDragActive }) => (\r\n              <div>\r\n                {isDragActive && (\r\n                  <div>\r\n                    <div>\r\n                      <div>Бросайте файлы сюда, я ловлю</div>\r\n                      <div>\r\n                        Мы принимаем картинки (jpg, png, gif), офисные файлы\r\n                        (doc, xls, pdf) и zip-файлы.\r\n                      </div>\r\n                      <div>Размеры файла до 5 МБ</div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <h2 className=\"form__header\">Отправлялка сообщений</h2>\r\n                <form {...getRootProps()}>\r\n                  <input {...getInputProps()} />\r\n                  <div className=\"form__group\">\r\n                    <div className=\"form__label\">От кого</div>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"nameFrom\"\r\n                      placeholder={form.NAME_PLACEHOLDER}\r\n                      value={inputs.nameFrom}\r\n                      onChange={handleChange}\r\n                      tabIndex=\"1\"\r\n                      className=\"form__input\"\r\n                    />\r\n                    <input\r\n                      type=\"email\"\r\n                      name=\"emailFrom\"\r\n                      placeholder={form.EMAIL_PLACEHOLDER}\r\n                      value={inputs.emailFrom}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      tabIndex=\"2\"\r\n                      required\r\n                      className=\"form__input\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form__errorcontainer\">\r\n                    <div className=\"form__error\">{errors.emailFrom}</div>\r\n                  </div>\r\n                  <div className=\"form__group\">\r\n                    <div className=\"form__label\">Кому</div>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"nameTo\"\r\n                      value={inputs.nameTo}\r\n                      onChange={handleChange}\r\n                      placeholder={form.NAME_PLACEHOLDER}\r\n                      tabIndex=\"3\"\r\n                      className=\"form__input\"\r\n                    />\r\n                    <input\r\n                      type=\"email\"\r\n                      name=\"emailTo\"\r\n                      value={inputs.emailTo}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      placeholder={form.EMAIL_PLACEHOLDER}\r\n                      tabIndex=\"4\"\r\n                      required\r\n                      className=\"form__input\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form__errorcontainer\">\r\n                    <div className=\"form__error\">{errors.emailTo}</div>\r\n                  </div>\r\n                  <div className=\"form__group\">\r\n                    <div className=\"form__label\">Тема письма</div>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"subject\"\r\n                      value={inputs.subject}\r\n                      onChange={handleChange}\r\n                      tabIndex=\"5\"\r\n                      className=\"form__input form__input-fullwidth\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form__group\">\r\n                    <div className=\"form__label\">Сообщение</div>\r\n                    <textarea\r\n                      name=\"textMessage\"\r\n                      value={inputs.textMessage}\r\n                      onChange={handleChange}\r\n                      tabIndex=\"6\"\r\n                      className=\"form__input form__input-fullwidth form__input-textarea\"\r\n                    ></textarea>\r\n                  </div>\r\n                  {files.length > 0 && (\r\n                    <div className=\"form__group\">\r\n                      <div className=\"form__files\">\r\n                        {files.map((file, index) => (\r\n                          <div\r\n                            key={file.path + index}\r\n                            className=\"form__filecontainer\"\r\n                          >\r\n                            <img\r\n                              src={paperclip}\r\n                              className=\"form__paperclip-desaturated\"\r\n                              alt=\"paperclip\"\r\n                            />\r\n                            <span className=\"form__filename\">\r\n                              {processFileName(file.path)}\r\n                            </span>\r\n                            <span\r\n                              className=\"form__filedelete\"\r\n                              onClick={deleteFile(index)}\r\n                            >\r\n                              <img src={trash} alt=\"delete\" />\r\n                              <span>Удалить</span>\r\n                            </span>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <div className=\"from__group\">\r\n                    <div>\r\n                      {errors.invalidTypeFile.message &&\r\n                        errors.invalidTypeFile.files.map((file, index) => (\r\n                          <div key={file.path + index}>\r\n                            <span>{`${file.name} `}</span>\r\n                            <span className=\"form__error\">\r\n                              {errors.invalidTypeFile.message}\r\n                            </span>\r\n                          </div>\r\n                        ))}\r\n                      {errors.limitedSizeFile.message &&\r\n                        errors.limitedSizeFile.files.map((file, index) => (\r\n                          <div key={file.path + index}>\r\n                            <span>{`${file.name} `}</span>\r\n                            <span>{`${convertByteToMb(file.size).toFixed(\r\n                              2\r\n                            )}Mb `}</span>\r\n                            <span className=\"form__error\">\r\n                              {errors.limitedSizeFile.message}\r\n                            </span>\r\n                          </div>\r\n                        ))}\r\n                      <div className=\"form__error\">\r\n                        {errors.limitedSizeFiles}\r\n                      </div>\r\n                    </div>\r\n                    <label className=\"form__label\">\r\n                      <img src={paperclip} alt=\"paperclip\" />\r\n                      <span className=\"form__label form__label-blue form__link\">\r\n                        Прикреить файл\r\n                      </span>\r\n                      <input\r\n                        type=\"file\"\r\n                        onClick={openDialog}\r\n                        className=\"form__filebutton\"\r\n                      />\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"form__group\">\r\n                    <input\r\n                      type=\"submit\"\r\n                      onClick={handleSubmit}\r\n                      value=\"Отправить\"\r\n                      disabled={!isValid}\r\n                      className=\"form__button\"\r\n                    />\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            )}\r\n          </Dropzone>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nSendForm.propTypes = {\r\n  sendMessage: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SendForm;\r\n","import { actionTypes } from '../constants';\r\nimport { filesToBase64 } from '../utils';\r\nimport Sendsay from 'sendsay-api';\r\n\r\nexport const sendMessage = message => dispatch => {\r\n  return new Promise(resolve => {\r\n    const sendsay = new Sendsay();\r\n    sendsay\r\n      .login({\r\n        login: 'soldatik2005@mail.ru',\r\n        password: 'Y0df9;bpym',\r\n      })\r\n      .then(() => {\r\n        filesToBase64(message.files);\r\n      })\r\n      .then(\r\n        filesBase64 => {\r\n          dispatch({\r\n            type: actionTypes.LOGIN_SUCCESS,\r\n            payload: {\r\n              isLogged: true,\r\n              session: sendsay.session,\r\n            },\r\n          });\r\n          sendsay\r\n            .request({\r\n              action: 'issue.send.test',\r\n              letter: {\r\n                subject: message.subject,\r\n                'from.name': message.nameFrom,\r\n                'from.email': message.emailFrom,\r\n                'to.name': message.nameTo,\r\n                message: { text: message.textMessage },\r\n                attaches: filesBase64,\r\n              },\r\n              sendwhen: 'test',\r\n              mca: [message.emailTo],\r\n            })\r\n            .then(res => {\r\n              dispatch({\r\n                type: actionTypes.SEND_MESSAGE,\r\n                payload: {\r\n                  message: {\r\n                    date: Date.now(),\r\n                    subject: message.subject,\r\n                    trackId: res['track.id'],\r\n                    status: 0,\r\n                  },\r\n                },\r\n              });\r\n              resolve(res);\r\n            });\r\n        },\r\n        error => {\r\n          dispatch({\r\n            type: actionTypes.LOGIN_ERROR,\r\n            error: true,\r\n            payload: {\r\n              errMessage: error,\r\n              session: '',\r\n            },\r\n          });\r\n        }\r\n      );\r\n  });\r\n};\r\n\r\nexport const getStatus = trackId => dispatch => {\r\n  const sendsay = new Sendsay();\r\n  sendsay\r\n    .login({\r\n      login: 'soldatik2005@mail.ru',\r\n      password: 'Y0df9;bpym',\r\n    })\r\n    .then(\r\n      () => {\r\n        dispatch({\r\n          type: actionTypes.LOGIN_SUCCESS,\r\n          payload: {\r\n            isLogged: true,\r\n            session: sendsay.session,\r\n          },\r\n        });\r\n        sendsay\r\n          .request({\r\n            action: 'track.get',\r\n            id: trackId,\r\n            session: sendsay.session,\r\n          })\r\n          .then(res => {\r\n            dispatch({\r\n              type: actionTypes.GET_STATUS,\r\n              payload: {\r\n                trackId: trackId,\r\n                status: res.obj.status,\r\n              },\r\n            });\r\n          });\r\n      },\r\n      error => {\r\n        dispatch({\r\n          type: actionTypes.LOGIN_ERROR,\r\n          error: true,\r\n          payload: {\r\n            errMessage: error,\r\n            session: '',\r\n          },\r\n        });\r\n      }\r\n    );\r\n};\r\n","import { connect } from 'react-redux';\r\nimport SendForm from '../components/SendForm';\r\nimport { sendMessage } from '../actions';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  sendMessage: message => dispatch(sendMessage(message)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SendForm);\r\n","import React, { useEffect } from 'react';\r\nimport { statusMessage } from '../constants';\r\nimport './SendMessagesList.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SendMessagesList = ({ messages, getStatus }) => {\r\n  useEffect(() => {\r\n    if (messages.length > 0) {\r\n      messages.forEach(message => {\r\n        getStatus(message.trackId);\r\n      });\r\n    }\r\n  });\r\n  const convertStatus = status => {\r\n    if (+status === -1) {\r\n      return statusMessage.SENT;\r\n    } else if (+status < -1) {\r\n      return statusMessage.ERROR;\r\n    } else if (+status > -1) {\r\n      return statusMessage.QUEUE;\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"messages__container\">\r\n      <h2 className=\"messages__header\">Отправленные сообщения</h2>\r\n      {messages.length === 0 ? (\r\n        <div>Сообщения еще не отправлялись</div>\r\n      ) : (\r\n        <table>\r\n          <thead className=\"table__head\">\r\n            <tr className=\"table__headcells\">\r\n              <td>Дата</td>\r\n              <td>Тема</td>\r\n              <td className=\"table__statuscell\">Статус</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {messages.map(message => {\r\n              return (\r\n                <tr key={message.trackId}>\r\n                  <td className=\"table__datecell\">\r\n                    {new Date(message.date).toLocaleString('ru-RU', {\r\n                      day: 'numeric',\r\n                      month: 'long',\r\n                    })}\r\n                  </td>\r\n                  <td className=\"table__subjectcell\">{message.subject}</td>\r\n                  <td className=\"table__statuscell\">\r\n                    {convertStatus(message.status)}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nSendMessagesList.propTypes = {\r\n  messages: PropTypes.array.isRequired,\r\n  getStatus: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SendMessagesList;\r\n","import { connect } from 'react-redux';\r\nimport SendMessagesList from '../components/SendMessagesList';\r\nimport { getStatus } from '../actions';\r\n\r\nconst mapStateFromProps = state => ({\r\n  messages: state.messagesReducer.messages,\r\n});\r\nconst mapDispatchFromProps = dispatch => ({\r\n  getStatus: trackId => dispatch(getStatus(trackId)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateFromProps,\r\n  mapDispatchFromProps\r\n)(SendMessagesList);\r\n","import React from 'react';\r\nimport './Logo.css';\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className=\"logo__container\">\r\n      <div className=\"logo__element logo__circle\" data-test=\"circle\"></div>\r\n      <div\r\n        className=\"logo__element logo__rectangle\"\r\n        data-test=\"rectangle\"\r\n      ></div>\r\n      <div className=\"logo__element logo__circle\" data-test=\"circle\"></div>\r\n      <div\r\n        className=\"logo__element logo__rectangle logo__rectangle-skew\"\r\n        data-test=\"skew\"\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React from 'react';\nimport SendFormContainer from './containers/SendFormContainer';\nimport SendMessagesListContainer from './containers/SendMessagesListContainer';\nimport Logo from './components/Logo';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Logo />\n      <SendFormContainer />\n      <SendMessagesListContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { actionTypes } from '../constants';\r\n\r\nconst initialState = {\r\n  isLogged: false,\r\n  session: '',\r\n  error: '',\r\n};\r\n\r\nconst login = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLogged: action.payload.isLogged,\r\n        session: action.payload.session,\r\n        error: '',\r\n      };\r\n    case actionTypes.LOGIN_ERROR:\r\n      return {\r\n        ...state,\r\n        isLogged: false,\r\n        session: '',\r\n        error: action.payload.errMessage,\r\n      };\r\n    case actionTypes.LOGOUT:\r\n      return { ...state, isLogged: false, session: '', error: '' };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default login;\r\n","import { actionTypes } from '../constants';\r\n\r\nconst initialState = {\r\n  messages: [],\r\n};\r\n\r\nconst messagesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SEND_MESSAGE:\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, action.payload.message],\r\n      };\r\n    case actionTypes.GET_STATUS:\r\n      let updatedMessages = state.messages;\r\n      updatedMessages.forEach(message => {\r\n        if (message.trackId === action.trackId) {\r\n          message.status = action.status;\r\n        }\r\n        return message;\r\n      });\r\n      return {\r\n        ...state,\r\n        messages: updatedMessages,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default messagesReducer;\r\n","import { combineReducers } from 'redux';\r\nimport login from './login';\r\nimport messagesReducer from './messagesReducer';\r\n\r\nexport default combineReducers({ login, messagesReducer });\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst middleware = [thunk];\nif (process.env.NODE_ENV !== 'production') {\n  middleware.push(logger);\n}\n\nconst store = createStore(rootReducer, applyMiddleware(...middleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}